Metadata-Version: 2.1
Name: ultralytics
Version: 8.0.109
Summary: Ultralytics YOLOv8 for SOTA object detection, multi-object tracking, instance segmentation, pose estimation and image classification.
Home-page: https://github.com/ultralytics/ultralytics
Author: Ultralytics
Author-email: hello@ultralytics.com
License: AGPL-3.0
Project-URL: Bug Reports, https://github.com/ultralytics/ultralytics/issues
Project-URL: Funding, https://ultralytics.com
Project-URL: Source, https://github.com/ultralytics/ultralytics
Keywords: machine-learning,deep-learning,vision,ML,DL,AI,YOLO,YOLOv3,YOLOv5,YOLOv8,HUB,Ultralytics
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Software Development
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib>=3.2.2
Requires-Dist: opencv-python>=4.6.0
Requires-Dist: Pillow>=7.1.2
Requires-Dist: PyYAML>=5.3.1
Requires-Dist: requests>=2.23.0
Requires-Dist: scipy>=1.4.1
Requires-Dist: torch>=1.7.0
Requires-Dist: torchvision>=0.8.1
Requires-Dist: tqdm>=4.64.0
Requires-Dist: pandas>=1.1.4
Requires-Dist: seaborn>=0.11.0
Requires-Dist: psutil
Requires-Dist: sentry_sdk
Provides-Extra: dev
Requires-Dist: check-manifest; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: mkdocs-material; extra == "dev"
Requires-Dist: mkdocstrings[python]; extra == "dev"
Requires-Dist: mkdocs-redirects; extra == "dev"
Requires-Dist: mkdocs-ultralytics-plugin; extra == "dev"
Provides-Extra: export
Requires-Dist: coremltools>=6.0; extra == "export"
Requires-Dist: openvino-dev>=2022.3; extra == "export"
Requires-Dist: tensorflowjs; extra == "export"

# YOLOv8 Aerial Sheep Detection and Counting
YOLOv8 Aerial Sheep Detection and Counting. Simulated on Gazebo.

## Introduction
This repository contains a Sheep Detector and Counter trained by [YOLOv8](https://github.com/ultralytics/ultralytics) algorithm with [Sheep Dataset](https://universe.roboflow.com/riis/aerial-sheep/dataset/1) from Roboflow.

## Train Results
Train results on YOLOv8n. Weights are provided in resources/weights direcotry.

![alt text](/resources/demo/val_batch1_pred.jpg "YOLOv8n Train Result")

![alt text](/resources/demo/results.png "YOLOv8n Train Result")

## Installation
### Create a virtual environment
```commandline
# create
python -m venv yolov8-sheep

# activate
source yolov8-sheep/bin/activate
```

### Clone repository
```commandline
git clone https://github.com/monemati/YOLOv8-Sheep-Detection-Counting.git
cd YOLOv8-Sheep-Detection-Counting
```

### Install packages
```commandline
pip install -e '.[dev]'
```

## Run
```commandline
# On image
python count.py

# On Video
python track.py
```
- Change file_path to your desired files. Sample files are provided in resources/images and resources/videos direcotries.

## Simulate in Gazebo
- You need to follow [this tutorial](https://github.com/monemati/multiuav-gazebo-simulation) to setup test environment.
- You can use Models and Worlds provided in resources/models and resources/worlds direcotries.
- Open a terminal and use the command below to launch your world (this will launch gazebo):
```
roslaunch gazebo_ros agriculture.launch
```
- Open a new terminal and run a UAV:
```
cd ~/ardupilot/Tools/autotest && ./sim_vehicle.py -v ArduCopter -f gazebo-iris -I0
```
- After seeing "APM: EKF2 IMU0 is using GPS" message in console, you can use the commands below to takeoff:
```
mode guided
arm throttle
takeoff 40
```
- Now in a new terminal use the command below:
```
python sheep.py
```
- You can watch the demo from [this file](https://github.com/monemati/YOLOv8-Sheep-Detection-Counting/blob/main/resources/demo/Gazebo-Sheep-Detector-Counting-Demo.mp4)

## Results

![alt text](/resources/demo/Gazebo-Sheep-Detector-Counting.png "Gazebo Sheep Detector Counting")

![alt text](/resources/demo/Aerial-Sheep-01.png "Aerial Sheep")
  
## Acknowledgement
- https://github.com/ultralytics/ultralytics
- https://www.ros.org/
- https://gazebosim.org/
- https://github.com/ArduPilot/ardupilot
